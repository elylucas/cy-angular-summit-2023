"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[162],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},s=Object.keys(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=o.createContext({}),p=function(e){var n=o.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=p(e.components);return o.createElement(i.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),d=p(t),m=a,g=d["".concat(i,".").concat(m)]||d[m]||u[m]||s;return t?o.createElement(g,l(l({ref:n},c),{},{components:t})):o.createElement(g,l({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,l=new Array(s);l[0]=d;var r={};for(var i in n)hasOwnProperty.call(n,i)&&(r[i]=n[i]);r.originalType=e,r.mdxType="string"==typeof e?e:a,l[1]=r;for(var p=2;p<s;p++)l[p]=t[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9390:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>p});var o=t(7462),a=(t(7294),t(3905));const s={slug:"/"},l="Getting Started",r={unversionedId:"getting-started",id:"getting-started",title:"Getting Started",description:"Welcome to the Workshop!",source:"@site/docs/getting-started.md",sourceDirName:".",slug:"/",permalink:"/workshop-starter/",draft:!1,tags:[],version:"current",frontMatter:{slug:"/"},sidebar:"tutorialSidebar"},i={},p=[{value:"Clone Repo and Install Dependencies",id:"clone-repo-and-install-dependencies",level:2},{value:"Start App",id:"start-app",level:2},{value:"Install Cypress",id:"install-cypress",level:2},{value:"E2E Testing",id:"e2e-testing",level:2},{value:"Add First E2E Spec",id:"add-first-e2e-spec",level:3},{value:"Add user should get log in message spec",id:"add-user-should-get-log-in-message-spec",level:3},{value:"Using Cypress Studio",id:"using-cypress-studio",level:3},{value:"Login Test",id:"login-test",level:3},{value:"Clicking Like should increase count test",id:"clicking-like-should-increase-count-test",level:3},{value:"User should be able to hire hero test",id:"user-should-be-able-to-hire-hero-test",level:3},{value:"Add cy.session",id:"add-cysession",level:3},{value:"CT Tests",id:"ct-tests",level:2},{value:"Button Spec",id:"button-spec",level:3},{value:"LoginForm Spec",id:"loginform-spec",level:3},{value:"Test Form Validation",id:"test-form-validation",level:4},{value:"Auth Tests",id:"auth-tests",level:4}],c={toc:p};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"getting-started"},"Getting Started"),(0,a.kt)("p",null,"Welcome to the Workshop!"),(0,a.kt)("p",null,"This workshop covers cool stuff."),(0,a.kt)("p",null,"To get started, clone the repo and install the dependencies:"),(0,a.kt)("h2",{id:"clone-repo-and-install-dependencies"},"Clone Repo and Install Dependencies"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git clone git@github.com:elylucas/cypress-heroes-angular-summit.git\n")),(0,a.kt)("h2",{id:"start-app"},"Start App"),(0,a.kt)("p",null,"Go into the ",(0,a.kt)("strong",{parentName:"p"},"client")," and ",(0,a.kt)("strong",{parentName:"p"},"server")," directories and start the apps:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cd client\nnpm run start\n")),(0,a.kt)("p",null,"and in another terminal:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cd server\nnpm run start:dev\n")),(0,a.kt)("p",null,"Then open the app in your code editor:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title=./cypress-heroes-angular-summit",title:"./cypress-heroes-angular-summit"},"code .\n")),(0,a.kt)("h2",{id:"install-cypress"},"Install Cypress"),(0,a.kt)("p",null,"From the ",(0,a.kt)("strong",{parentName:"p"},"client")," folder, install cypress and open it up:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm i cypress -D\nnpx cypress open\n")),(0,a.kt)("h2",{id:"e2e-testing"},"E2E Testing"),(0,a.kt)("p",null,"Click E2E testing and follow the wizard to setup app."),(0,a.kt)("h3",{id:"add-first-e2e-spec"},"Add First E2E Spec"),(0,a.kt)("p",null,"Create home.cy.ts in e2e folder and add a visit"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"describe('home page', () => {\n  it('should load the page', () => {\n    cy.visit('/');\n  });\n});\n")),(0,a.kt)("p",null,"Show how test doesn't load because url, then update cypress.config.ts with\nbaseUrl:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"e2e: {\n  //highlight-next-line\n  baseUrl: 'http://localhost:4200',\n  setupNodeEvents(on, config) {\n    // implement node event listeners here\n  },\n},\n")),(0,a.kt)("p",null,"Show test pass. Play around in UI."),(0,a.kt)("h3",{id:"add-user-should-get-log-in-message-spec"},"Add user should get log in message spec"),(0,a.kt)("p",null,"Update first test to be a ",(0,a.kt)("inlineCode",{parentName:"p"},"beforeEach")," instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"it"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"beforeEach(() => {\n  cy.visit('/');\n});\n")),(0,a.kt)("p",null,"Show how to use inspector and show how to get data-cy attributes for the card\nand icon buttons."),(0,a.kt)("p",null,"Add test:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"it('clicking on like should alert the user they need to login', () => {\n  cy.get('[data-cy=hero-card]').first().find('button[data-cy=like]').click();\n  cy.contains('You must log in to like.');\n  cy.get('button').contains('Ok').click();\n  cy.contains('You must log in to like.').should('not.exist');\n});\n")),(0,a.kt)("h3",{id:"using-cypress-studio"},"Using Cypress Studio"),(0,a.kt)("p",null,"Show how to use Cypress Studio to record a test."),(0,a.kt)("p",null,"Add experimentalStudio to e2e config."),(0,a.kt)("p",null,"Use studio to record a test show that hiring a hero should prompt to login."),(0,a.kt)("h3",{id:"login-test"},"Login Test"),(0,a.kt)("p",null,"add test to show login:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"describe('when logged in', () => {\n  it('user should be able to log in', () => {\n    cy.get('button').contains('Login').click();\n    cy.get('input[type=\"email\"]').type('test@test.com');\n    cy.get('input[type=\"password\"]').type('test123');\n    cy.get('button').contains('Sign in').click();\n    cy.contains('button', 'Logout').should('be.visible');\n  });\n});\n")),(0,a.kt)("p",null,"Move login code to ",(0,a.kt)("inlineCode",{parentName:"p"},"beforeEach")," block describe."),(0,a.kt)("h3",{id:"clicking-like-should-increase-count-test"},"Clicking Like should increase count test"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"it('clicking like on a hero should increase their fan count', function () {\n  //get current fan count of first hero\n  cy.get('[data-cy=hero-card]')\n    .first()\n    .as('firstHero')\n    .find('[data-cy=fans]')\n    .as('fanSpan')\n    .then((el) => {\n      cy.wrap(el.text()).as('fanCount');\n    });\n  //click like button\n  cy.get('@firstHero').find('[data-cy=like]').click();\n  //assert count increased\n  cy.get('@fanCount').then((fanCount) => {\n    cy.get('@fanSpan').should('have.text', Number(fanCount) + 1);\n  });\n});\n")),(0,a.kt)("h3",{id:"user-should-be-able-to-hire-hero-test"},"User should be able to hire hero test"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"it('user should be able to hire a hero', function () {\n  cy.get<Prisma.Hero>('@newHero').then((newHero) => {\n    //get current saves count of first hero\n    cy.contains('[data-cy=hero-card]', newHero.name)\n      .as('firstHero')\n      .find('[data-cy=saves]')\n      .as('saveSpan')\n      .then((el) => {\n        cy.wrap(el.text()).as('saveCount');\n      });\n    //click hire button\n    cy.get('@firstHero').find('[data-cy=money]').click();\n    //click yes in modal\n    cy.get('button').contains('Yes').click();\n    //assert count increased\n    cy.get('@saveCount').then((saveCount) => {\n      cy.get('@saveSpan').should('have.text', Number(saveCount) + 1);\n    });\n  });\n});\n")),(0,a.kt)("h3",{id:"add-cysession"},"Add cy.session"),(0,a.kt)("p",null,"Wrap login with ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.session"),", add cy.contains to login button and cy.visit after\nsession:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"beforeEach(() => {\n  cy.session('user-test@test.com', () => {\n    cy.visit('/');\n    cy.get('button').contains('Login').click();\n    cy.get('input[type=\"email\"]').type('test@test.com');\n    cy.get('input[type=\"password\"]').type('test123');\n    cy.get('button').contains('Sign in').click();\n    cy.contains('button', 'Logout').should('be.visible');\n  });\n  cy.visit('/');\n});\n")),(0,a.kt)("h2",{id:"ct-tests"},"CT Tests"),(0,a.kt)("p",null,"Go back to Cypress app, close the browser, and switch testing type to CT. Go\nthrough set up wizard."),(0,a.kt)("h3",{id:"button-spec"},"Button Spec"),(0,a.kt)("p",null,"create ",(0,a.kt)("strong",{parentName:"p"},"src/app/components/button/button.component.cy.ts")," spec:"),(0,a.kt)("p",null,"Add button spec shell and explain mount:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"describe('ButtonComponent', () => {\n  it('should mount', () => {});\n});\n")),(0,a.kt)("p",null,"Show how to use wrapper to pass in content:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"it('should mount', () => {\n  @Component({\n    template: '<app-button>Click me</app-button>',\n  })\n  class ButtonWrapper {}\n\n  cy.mount(ButtonWrapper, {\n    declarations: [ButtonComponent],\n  });\n  cy.get('button').contains('Click me');\n});\n")),(0,a.kt)("p",null,"Update to use template syntax:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"it('should mount', () => {\n  cy.mount('<app-button>Click me</app-button>', {\n    declarations: [ButtonComponent],\n  });\n\n  cy.get('button').contains('Click me');\n});\n")),(0,a.kt)("p",null,"Add test for onClick event:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"it('should respond to onClick event', () => {\n  cy.mount<ButtonComponent>('<app-button>Click me</app-button>', {\n    declarations: [ButtonComponent],\n  });\n});\n")),(0,a.kt)("p",null,"update test to use properties and emit event:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"it('should respond to onClick event', () => {\n  cy.mount<ButtonComponent>(\n    '<app-button (onClick)=\"this.onClick\">Click me</app-button>',\n    {\n      declarations: [ButtonComponent],\n      componentProperties: {\n        onClick: createOutputSpy('onClickSpy'),\n      },\n    }\n  );\n  cy.get('button').click();\n  cy.get('@onClickSpy').should('have.been.called');\n});\n")),(0,a.kt)("h3",{id:"loginform-spec"},"LoginForm Spec"),(0,a.kt)("p",null,"Go over when to use ct vs e2e. Edge cases of LoginForm are a good candidate to\ndo in ct spec."),(0,a.kt)("p",null,"create ",(0,a.kt)("strong",{parentName:"p"},"src/app/components/login-form/login-form.component.cy.ts")," spec:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { LoginFormComponent } from './login-form.component';\n\ndescribe('LoginForm', () => {\n  it('should mount', () => {\n    cy.mount('<app-login-form></app-login-form>', {\n      declarations: [LoginFormComponent],\n    });\n  });\n});\n")),(0,a.kt)("p",null,"Show it fail due to modules not imported"),(0,a.kt)("p",null,"Update to add declarations and imports:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"cy.mount('<app-login-form></app-login-form>', {\n  declarations: [\n    LoginFormComponent,\n    InputFieldComponent,\n    ButtonComponent,\n    TextInputComponent,\n  ],\n  imports: [HttpClientModule, ReactiveFormsModule],\n});\n")),(0,a.kt)("p",null,"Use custom mount command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=cypress/support/component.ts",title:"cypress/support/component.ts"},"type MountParams = Parameters<typeof mount>;\n\nCypress.Commands.add(\n  'mount',\n  (component: MountParams[0], config: MountParams[1] = {}) => {\n    const declarations = [\n      ...(config.declarations || []),\n      LoginFormComponent,\n      InputFieldComponent,\n      ButtonComponent,\n      TextInputComponent,\n      ValidationErrorsComponent,\n    ];\n    const imports = [\n      ...(config.imports || []),\n      HttpClientModule,\n      ReactiveFormsModule,\n    ];\n    return mount(component, {\n      ...config,\n      declarations,\n      imports,\n    });\n  }\n);\n")),(0,a.kt)("p",null,"Update test to remove custom config:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"it('should mount', () => {\n  cy.mount('<app-login-form></app-login-form>');\n});\n")),(0,a.kt)("h4",{id:"test-form-validation"},"Test Form Validation"),(0,a.kt)("p",null,"Add validation tests:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"it('should show validation messages when inputs are blank', () => {\n  cy.mount('<app-login-form></app-login-form>');\n  cy.get('button').contains('Sign in').click();\n\n  cy.contains('Email is required');\n  cy.contains('Password is required');\n});\n\nit('should show validation messages when email value is invalid', () => {\n  cy.mount('<app-login-form></app-login-form>');\n  cy.get('input[type=email]').type('bademail');\n  cy.get('button').contains('Sign in').click();\n  cy.contains('Email is not valid');\n});\n")),(0,a.kt)("h4",{id:"auth-tests"},"Auth Tests"),(0,a.kt)("p",null,"Add spec to show valid login:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"it('should login when credentials are valid', () => {\n  cy.mount(\n    '<app-login-form (onLogin)=\"onLogin.emit($event)\"></app-login-form>',\n    {\n      componentProperties: {\n        onLogin: createOutputSpy('onLoginSpy'),\n      },\n    }\n  );\n\n  cy.get('input[type=email]').type('good@email.com');\n  cy.get('input[type=password]').type('goodpass');\n\n  cy.get('button').contains('Sign in').click();\n\n  cy.get('@onLoginSpy').should('have.been.called');\n});\n")),(0,a.kt)("p",null,"show test fail since it tries to make http request"),(0,a.kt)("p",null,"add intercept:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"cy.intercept('POST', '/auth', {\n  statusCode: 200,\n  body: {},\n});\n")),(0,a.kt)("p",null,"Add invalid auth test:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"it('should show bad login message when credentials are invalid', () => {\n  cy.intercept('POST', '/auth', {\n    statusCode: 401,\n  });\n\n  cy.mount<LoginFormComponent>('<app-login-form></app-login-form>', {\n    componentProperties: {\n      onLogin: createOutputSpy('onLoginSpy'),\n    },\n  });\n  cy.get('button').contains('Sign in').click();\n\n  cy.get('input[type=email]').type('bad@email.com');\n  cy.get('input[type=password]').type('badpass');\n  cy.get('button').contains('Sign in').click();\n\n  cy.contains('Invalid username or password');\n  cy.get('@onLoginSpy').should('not.have.been.called');\n});\n")),(0,a.kt)("p",null,"Show how to use IOC and add provider:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"cy.mount<LoginFormComponent>('<app-login-form></app-login-form>', {\n  componentProperties: {\n    onLogin: createOutputSpy('onLoginSpy'),\n  },\n  providers: [\n    {\n      provide: AuthService,\n      useValue: {\n        login: () => {\n          return throwError(() => {\n            throw Error('Invalid username or password');\n          });\n        },\n      },\n    },\n  ],\n});\n")))}u.isMDXComponent=!0}}]);